//struct Stu
//{
//	char name[20];
//	int tel[20];
//}a,b,c;//此处的a，b，c为全局结构体变量
//
//struct
//{
//	char name[20];
//	int tel[20];
//}sa;//匿名结构体类型
//struct
//{
//	char name[20];
//	int tel[20];
//}*psa;
//
//int main()
//{
//	struct Stu s1;//s1为局部结构体变量
//
//	psa = &sa;//虽然两者的结构体类型相似，但是编译器会将两者认作不同的结构体类型
//	return 0;
//}

//创建一个链表从s1依次到s3(应该是错误的)
struct s1
{
	int num;
	struct s2* s2;
};
struct s2
{
	int num2;
	struct s3* s3_end;
};

struct s3
{
	int num3_end;
};
int main()
{

	return 0;
}

////结构体的自引用
//struct Node 
//{
//	int data;//4	称为数据域
//	struct Node* next;//4/8	//自引用要用指针指向下一个结点(结构体)		称为指针域
//							//否则无法得出本结构体变量的大小
//};

//typedef struct Node 
//{
//	int data;
//	struct Node* next;
//}Node;//typedef 将struct Node重命名为了Node		Node == struct Node

//typedef struct
//{
//	int data;
//	Node* next;//wrong--重命名次序在后
//}Node;
//int main()
//{
//	struct Node n1;
//	Node n2;
//	return 0;
//}

////声明结构体
//struct T
//{
//	double weight;
//	double height;
//};
//
//struct S
//{
//	char c;
//	int a;
//	struct T st;//使用前一定要先声明
//	double d;
//	char arr[20];
//};
//
//int main()
//{
//	//初始化一个结构体变量
//	struct S s = { 'a', 4, {55.4, 78.0}, 5.5, "Hello world" };
//	//输出
//	printf("%c  %d  %lf  %s\n", s.c, s.a, s.d, s.arr);
//	printf("%lf\n", s.st.weight);
//	return 0;
//}

struct S1
{
	char c1;//对齐数为1.c1存放在偏移量为0的地方，占用1字节
	char c2;//对齐数1字节.c2紧挨着c1，占用1字节
	int c3;	//对齐数为4字节.要从偏移量为4的地址处存放c3，c2与c3之间浪费了两个字节的空间
			//此时总空间为1+1+2+4=8，是最大对齐数的整数倍,所以S1大小为8字节
};

struct S2
{
	char c1;//对齐数为1.存放在偏移量为0的地方，占1字节
	int c3;//对齐数为4字节，在偏移量为4的地方存放4字节，c1与c3之间浪费了3个字节的空间
	char c2;//对齐数1字节，紧挨c3，此时总空间为1+3+4+1=9，不是最大对齐数4的整数倍，要浪费空间，补齐到其整数倍，即S2占用内存12字节
};
struct S3
{
	int c3;//存放方式与s1一样
	char c1;
	char c2;
};
//int main()
//{
//	struct S1 s1 = { 0 };
//	struct S2 s2 = { 0 };
//	struct S3 s3 = { 0 };
//	printf("%d\n", sizeof(s1));//8
//	printf("%d\n", sizeof(s2));//12
//	printf("%d\n", sizeof(s3));//8
//	return 0;
//}

