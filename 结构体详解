//struct Stu
//{
//	char name[20];
//	int tel[20];
//}a,b,c;//此处的a，b，c为全局结构体变量
//
//struct
//{
//	char name[20];
//	int tel[20];
//}sa;//匿名结构体类型
//struct
//{
//	char name[20];
//	int tel[20];
//}*psa;
//
//int main()
//{
//	struct Stu s1;//s1为局部结构体变量
//
//	psa = &sa;//虽然两者的结构体类型相似，但是编译器会将两者认作不同的结构体类型
//	return 0;
//}

//创建一个链表从s1依次到s3(应该是错误的)
struct s1
{
	int num;
	struct s2* s2;
};
struct s2
{
	int num2;
	struct s3* s3_end;
};

struct s3
{
	int num3_end;
};
int main()
{

	return 0;
}

////结构体的自引用
//struct Node 
//{
//	int data;//4	称为数据域
//	struct Node* next;//4/8	//自引用要用指针指向下一个结点(结构体)		称为指针域
//							//否则无法得出本结构体变量的大小
//};

//typedef struct Node 
//{
//	int data;
//	struct Node* next;
//}Node;//typedef 将struct Node重命名为了Node		Node == struct Node

//typedef struct
//{
//	int data;
//	Node* next;//wrong--重命名次序在后
//}Node;
//int main()
//{
//	struct Node n1;
//	Node n2;
//	return 0;
//}

////声明结构体
//struct T
//{
//	double weight;
//	double height;
//};
//
//struct S
//{
//	char c;
//	int a;
//	struct T st;//使用前一定要先声明
//	double d;
//	char arr[20];
//};
//
//int main()
//{
//	//初始化一个结构体变量
//	struct S s = { 'a', 4, {55.4, 78.0}, 5.5, "Hello world" };
//	//输出
//	printf("%c  %d  %lf  %s\n", s.c, s.a, s.d, s.arr);
//	printf("%lf\n", s.st.weight);
//	return 0;
//}

struct S1
{
	char c1;//对齐数为1.c1存放在偏移量为0的地方，占用1字节
	char c2;//对齐数1字节.c2紧挨着c1，占用1字节
	int c3;	//对齐数为4字节.要从偏移量为4的地址处存放c3，c2与c3之间浪费了两个字节的空间
			//此时总空间为1+1+2+4=8，是最大对齐数的整数倍,所以S1大小为8字节
};

struct S2
{
	char c1;//对齐数为1.存放在偏移量为0的地方，占1字节
	int c3;//对齐数为4字节，在偏移量为4的地方存放4字节，c1与c3之间浪费了3个字节的空间
	char c2;//对齐数1字节，紧挨c3，此时总空间为1+3+4+1=9，不是最大对齐数4的整数倍，要浪费空间，补齐到其整数倍，即S2占用内存12字节
};

//struct S3
//{
//	double a;//对齐数为8,从0开始,占8字节
//	char b;//对齐数为1，占用第九字节的空间
//	int c;//对齐数为4,从第十二字节开始，占用4字节;大小为16字节,是最大对齐数的整数倍,最后结构体S3空间大小为16字节
//};

//struct S4
//{
//	char a;//对齐数为1,占用1字节
//	struct S3 s3;//因为vs默认对齐数为8,而s3大小为16,所以对齐数为8;从偏移量为8空间开始，占用16字节(a与s3之间的7个字节空间被浪费了)
//	double c;//对齐数为8，从偏移量为8的整数倍(此为24)开始,占用8字节;此时大小为32，是最大对齐数的整数倍，所以S4大小为32字节
//};
//int main()
//{
//	struct S1 s1 = { 0 };
//	struct S2 s2 = { 0 };
//	struct S3 s3 = { 0 };
//	printf("%d\n", sizeof(s1));//8
//	printf("%d\n", sizeof(s2));//12
//	printf("%d\n", sizeof(s3));//8
//	return 0;
//}

////设置默认对齐数
//#pragma pack(4)
//struct S
//{
//	char a;//对齐数为1，占一个字节
//	double b;//4<8,该对齐数为4,从偏移量为4处开始，占8个字节;此时结构体占用总空间大小12字节（是最大对齐数4的整数倍）
//};
//#pragma pack()
////取消设置的默认对齐数

//struct S1
//{
//	char a;//对齐数为1，占一个字节
//	double b;//8=8,该对齐数为8,从偏移量为8处开始，占8个字节;此时结构体占用总空间大小16字节（是最大对齐数8的整数倍）
//};
//int main()
//{
//	struct S s;
//	struct S1 s1;
//	printf("%d\n", sizeof(s));
//	printf("%d\n", sizeof(s1));
//	return 0;
//}

//offsetof (是宏)	offset偏移量
//#include<stddef.h>
//struct S 
//{
//	char a;//0
//	int b;//4
//	double c;//8
//};
//struct S 
//{
//	int a;//0
//	double b;//8
//	char c;//16
//};
//int main()
//{
//	//输出不同结构体成员的偏移量
//	printf("%d\n", offsetof(struct S, a));
//	printf("%d\n", offsetof(struct S, b));
//	printf("%d\n", offsetof(struct S, c));
//	return 0;
//}

//struct S
//{
//	char name;
//	int age;
//	double height;
//};
////要修改结构体内容，需要使用指针
//void Init(struct S* tmp)
//{
//	//结构体指针更改成员内容时要用箭头->
//	tmp->name = 'k';
//	tmp->age = 12;
//	tmp->height = 4.21;
//}
////输出,传址调用节约空间，但不安全
//void Print(const struct S* tmp)
//{
//	printf("%c\n", tmp->name);
//	printf("%d\n", tmp->age);
//	printf("%lf\n", tmp->height);
//}
//int main()
//{
//	struct S s = { 0 };
//	Init(&s);
//	Print(&s);
//	return 0;
//}

//位段(位:二进制位)
struct S
{
	int a : 5;//先开辟了一个四字节的空间，a占用五个bit
	int b : 2;//b相邻a占用2个bit
	int c : 10;//c邻着b占用10个bit，此时所开辟的空间剩余15个bit，无法满足d的存放，被浪费了
	int d : 30;//需要再申请一个四字节空间，存放d，占用30个bit，浪费2个bit
};//所以位段S占用空间为4+4个字节

struct S1
{
	char a : 4;
	char b : 3;
	char c : 3;
	char d : 4;
};
int main()
{
	//struct S s;
	struct S1 s1 = {0};
	//printf("%d\n", sizeof(s));//八个字节
	//printf("%d\n", sizeof(s1));//2byte
	s1.a = 10;//1010	4位——1010——10——a
	s1.b = 20;//10100	3位——100——4——4
	s1.c = 7;//111		3位——111——7——7
	s1.d = 3;//011		4位——0011——3——3
	//s1申请空间时占用2字节，存放数据为4a 30(4a 1f)
	return 0;
}
