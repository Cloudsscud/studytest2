#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<assert.h>
//char* my_strcpy(char* dest, const char* src)
//{
//	assert(dest && src);
//	char* ret = dest;
//	//将arr2中的所有字符全部拷贝到arr1,包括'\0'
//	while (*dest++ = *src++)
//	{
//		;
//	}
//	return ret;//返回拷贝目的地地址
//}
//int main()
//{
//	char arr1 = "abcdef";
//	char arr2 = "found";
//	my_strcpy(arr1, arr2);//将arr2拷贝并替换到arr1中
//	printf("%s\n", arr1);
//	return 0;
//}

char* my_strcat(char* dest, const char* src)
{
	char* ret = dest;
	assert(dest && src);
	while (*dest != '\0')//找出要追加到的目的地的结束位置'\0'
	{
		dest++;
	}
	//将来源字符串的所有字符追加在目的地字符串的后方
	while (*dest++ = *src++)
	{
		;
	}
	return ret;//返回追加目的地的地址
}
int main()
{
	char arr1[30] = "hello ";
	char arr2[] = "world";
	my_strcat(arr1, arr2);
	printf("%s\n", arr1);
	return 0;
}

//#include<string.h>
//#include<assert.h>
//int my_strcmp(const char* p1, const char* p2)
//{
//	assert(p1 && p2);
//	while (*p1 == *p2)
//	{
//		if (*p1 == '\0')//相同
//			return 0;
//		p1++;
//		p2++;
//	}
//	//if (*p1 > *p2)
//	//	return 1;//前者大
//	//else
//	//	return -1;//后者大
//	return (*p1 - *p2);//返回差值
//}
//int main()
//{
//	char* p1 = "abcdef";
//	//char* p2 = "abcdef";
//	char* p2 = "abfjka";
//	int ret = my_strcmp(p1, p2);
//	printf("%d\n", ret);
//	return 0;
//}

//int main()
//{
//	//char arr1[7] = "abcdef";
//	//char arr2[] = "hello,world";
//	//strncpy(arr1, arr2, 3);//hel def只将arr2的前三个字符拷贝到arr1中
//	char arr1[10] = "abdefghij";
//	char arr2[10] = "qwq";
//	strncpy(arr1, arr2, 6);	//本来应该将arr2的前六个字符拷贝到arr1中，
//							//但是arr2字符数量不够，所以缺少的字符均用'\0'替代,即arr1被改为"qwq'\0''\0''\0'hij'\0'"
//	printf("%s\n", arr1);
//	return 0;
//}

//模拟实现strncpy
char* my_strncpy(char* dest, const char* src, int num)
{
	assert(dest && src);
	char* start = dest;
	while (num && (*dest++ = *src++))//要么需要拷贝的字符数量足够了(num==0)，要么将被拷贝对象src的字符全部(包括'\0')已经拷贝到了dest
	{
		num--;
	}
	//此时可能num为0，也可能num!=0但是src已经将所有字符(包括'\0')拷贝到了dest中

	if (num)//先看num是否为0
		while (--num)	//若不为0，说明被拷贝字符串字符个数不足，应在后补上'\0'
						//但是因为此种情况下 上边while结束时，已经将被拷贝对象src的'\0'拷贝到dest了,不过num并未变化
						//所以应先将num-1再进行判断是否需要额外补'\0'
			*dest++ = '\0';
	return start;//返回拷贝完后的字符串地址
}
int main()
{
	char arr1[10] = "abcdefg";
	char arr2[] = "hello world";
	my_strncpy(arr1, arr2, 5);
	printf("%s\n", arr1);
	return 0;
}

#include<stdio.h>
#include<string.h>
////strncmp
//int main()
//{
//	const char* p1 = "abcdef";
//	const char* p2 = "abcmptqsda";
//	//int ret = strncmp(p1, p2, 3);//0
//	int ret = strncmp(p1, p2, 4);//-1
//	//int ret = strcmp(p1, p2);//-1
//	printf("%d\n", ret);
//	return 0;
//}

char* my_strstr(const char* p1, const char* p2)
{
	assert(p1 &&  p2);
	char* s1 = (char*) p1;//要使用const保护的指针时,要用强制类型转换
	char* s2 = (char*)p2;
	char* cur = s1;
	if (!*p2)
		return p1;
	while (*cur)
	{
		cur = s1;
		s2 = p2;
		while (*s1 != '\0' && *s2 != '\0' && *s1 == *s2)
		{
			s1++;
			s2++;
		}
		if (*s2 == '\0')
		{
			return cur;//找到子串
		}
		s1++;

		//优化
		while (!*s1 && !*s2 && *s1++ == *s2)//先判断s1对应的字符与s2对应的是否相等,若不等s1后移一个字符
		{
			s2++;//若相等再让s2后移
		}
		if (!*s2)
		{
			return cur;//找到子串
		}
		s2 = (char*)p2;//判断完之后复原子串
		cur = s1;

	}
	return NULL;//没有子串	
}

int main()
{
	char* p1 = "strstrcmpsacmpsa";
	char* p2 = "cmp";
	//char* ret = strstr(p1, p2);//若找到第一次出现的子串，则返回该串起始位置的地址
								//否则返回空指针
	char* ret = my_strstr(p1, p2);
	if (ret == NULL)
		printf("子串不存在\n");
	else
		printf("子串位置%s", ret);
	return 0;
}

//strtok——分割字符串
int main()
{
	char arr[] = "23465.163@qq.com";
	char* p = ".@";
	char* test[1024] = {0};
	strcpy(test, arr);//因为strtok使用时会修改字符串的符号，所以要拷贝一份临时字符串
	char* ret = NULL;
	for (ret = strtok(test, p); ret != NULL; ret = strtok(NULL, p))
	{
		printf("%s\n", ret);
	}
	return 0;
}

//#include<string.h>
//#include<errno.h>
////错误码与其对应的错误信息
////	0-No error
////	1-Operation not permitted
////	2-No such file or directory
////	...
////errno是全局的错误码的变量
////当C语言的库函数在使用时出现错误，则会将对应的错误码赋值给errno
//int main()
//{
//	//char* p = strerror(2);
//	//printf("%s\n", p);
//	FILE* pf = fopen("test.txt", "r");//操作一个叫"test.txt"的文件，方式是读取"r",返回类型是FILE*存放在pf中
//	if (pf == NULL)//空指针说明读取失败
//		printf("%s\n", strerror(errno));//输出失败的原因(错误码对应的错误信息)
//	else
//		printf("open file succes\n");
//	return 0;
//}

#include<ctype.h>
int main()
{
	char arr[] = "I am LeaRNinG C prIMe plus";
	//将该字符串全转为小写
	int i = 0;
	while (arr[i])
	{
		if (isupper(arr[i]))//判断是否为大写
			arr[i] = tolower(arr[i]);//若大写则改为小写
		i++;
	}
	printf("%s\n", arr);
	return 0;
}

//内存操作函数
struct Stu
{
	char name[20];
	int age;
};

void* my_memcpy(void* dest,const void* src,size_t sz)
{
	assert(dest && src);
	void* ret = dest;
	while (sz--)
	{
		*(char*)dest = *(char*)src;
		++(char*)dest;
		++(char*)src;
	}
	return ret;
}
//int main()
//{
//	//struct Stu s1[] = { {"张三",20},{"李四",19} };
//	//struct Stu s2[5] = {0};
//	////my_memcpy(s2,s1,sizeof(s1));
//	////memcpy(s2, s1, sizeof(s1));
//	//printf("%s\n", s1->name);
//	//printf("%d\n", s1->age);
//	//printf("%s\n", s2->name);
//	//printf("%d\n", s2->age);
//
//	int i = 0;
//	int arr1[] = { 1,2,3,4,5,6,7,8,9,10 };//将1-5拷贝到3-7的位置
//	//int arr2[10] = { 0 };//浪费空间
//	//my_memcpy(arr2, arr1, sizeof(arr1));
//	////my_memcpy(arr1 + 2, arr1, 20);
//	//my_memcpy(arr1+2, arr2, 20);
//	//memmove(arr1 + 2, arr1, 20);//处理内存重叠的拷贝
//	my_memmove(arr1 + 6, arr1, 20);
//	//C标准中，	memcpy只需拷贝内存不重叠的情况
//	//			memmove拷贝的是内存重叠的情况
//	for (i = 0; i < (sizeof(arr1)/sizeof(arr1[0])); i++)
//	{
//		printf("%d ",arr1[i]);
//	}
//	return 0;
//}

//#include<string.h>
//int main()
//{
//	//int arr1[] = { 1,4,5,6,3,7 };
//	//int arr2[] = { 1,4,1,5,6,4,8 };
//	//printf("%d\n", memcmp(arr1, arr2, 12));//比较的是从arr1，arr2往后的多少个字节
//	/*char arr[10] = { 0 };
//	memset(arr, '#', 8);*/
//	int arr[10] = { 0 };
//	memset(arr, 1, 9);//操作对象是字节
//	return 0;
//}


//找出最大的字符数组
#include<string.h>
int main()
{
	char arr[20] = { 0 };
	char arr1[] = "abcd";
	char arr2[] = "adcwa";
	char arr3[] = "afsaf";
	if (strcmp(arr1, arr2) > 0)
		strcpy(arr, arr1);
	else
		strcpy(arr, arr2);
	if (strcmp(arr, arr3) < 0)
		strcpy(arr, arr3);
	printf("%s\n", arr);
	return 0;
}
