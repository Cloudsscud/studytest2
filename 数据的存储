//2024/03/30
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>

//int check_sys()
//{
//	int a = 1;
//	return *(char*)&a;
//}
//
//int main()
//{
//	//写一个程序检测当前机器的字节序
//	int ret = check_sys();
//	if (ret == 1)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//
//	return 0;
//}

//int main()
//{
//	char a = -1;
//
//	signed char b = -1;
//	//1111 1111
//	//有符号位，仍为-1
//	unsigned char c = -1;
//	//1111 1111
//	//无符号位，要整型提升,前补0，变为
//	// 0000 0000 0000 0000 0000 0000 1111 1111
//	//即255
//	printf("a=%d,b=%d,c=%d\n", a, b, c);//-1 -1 255
//
//	return 0;
//}
// 
//int main()
//{
//	char a = -128;
//	//补码为11111111111111111111111110000000
//	// char类型，要截断
//	// 得到有符号位1的100000000
//	// 整型提升得到111111111111111111111111100000000
//	//%u打印无符号位的十进制
//	// 所以直接打印上边那个整型提升后的值，即2^32-2^7
//	printf("%u\n", a);
//	return 0;
//}

//#include<windows.h>
//int main()
//{
//	unsigned int i;
//	for (i = 9; i >= 0; i--)//死循环：i为一个无符号数，一定>=0，所以for循环始终满足条件
//	{
//		printf("%u\n", i);
//		Sleep(100);
//	}
//	return 0;
//}

//int main()
//{
//	char a[1000];
//	int i;
//	for (i=0;i<1000;i++)
//	{
//		a[i] = -1 - i;//从-1开始，逆时针到-128，再到0之前结束
//	}
//	printf("%d\n", strlen(a));//255=127+128
//	return 0;
//}

//int main()
//{
//	int n = 9;
//	float* pfloat = (float*)&n;
//	printf("n值为:%d\n", n);
//	printf("pfloat值为:%lf\n", *pfloat);
//
//	*pfloat = 9.0;
//	printf("n值为:%d\n", n);
//	printf("pfloat值为:%lf\n", *pfloat);
//}
//int main()
//{
//	int n = 9;
//	//00000000000000000000000000001001
//	float* pfloat = (float*)&n;
//	printf("n值为:%d\n", n);//9
//	printf("pfloat值为:%lf\n", *pfloat);
//	//0 00000000 00000000000000000001001
//	// 此时浮点数打印为
//	//0.00000000000000000001001，趋近于0
//
//	*pfloat = 9.0;
//	//1001.0
//	// (-1)^0 * 1.001 * 2^3
//	// 0 100000011 00100000000000000000000 浮点数存放形式
//	//010000001100100000000000000000000 
//	printf("n值为:%d\n", n);//超大数
//	printf("pfloat值为:%lf\n", *pfloat);//9.0
//}

int main()
{
	float a = 5.5;
	//101.1
	//(-1)^0 * 1.011 * 2^2
	//(-1)^s * M * 2^E
	// s = 0
	// M = 1.011
	// E = 2
	// 在内存中
	//0 10000001 01100000000000000000000
	// s   E+127    M-1并补后
	//0100 0000 1011 0000 0000 0000 0000 0000
	//0x40b00000
	//
}
