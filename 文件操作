
#define _CRT_SECURE_NO_WARNINGS
#include<errno.h>
#include<stdio.h>
#include<string.h>
//int main()
//{
//	//操作文件	fopen（文件名，操作方式），返回一个文件指针 用FILE*接收,若操作失败，则返回NULL
//	
//	//只读打开text.txt
//	//相对路径
//	//fopen("text.txt", "r");
//	
//	//绝对路径
//	//fopen("D:\\Project_C\\test\\test_12\\test_12", "r");//用\\防止进行转义
//
//	//  .  当前路径
//	//  .. 上一级路径
//	//fopen("../text.txt", "r");//在当前目录的 上一级目录的 text.txt文件
//	FILE* pf = fopen("text.txt", "w");
//	if (pf == NULL)
//	{
//		printf("%s\n", strerror(errno));
//		return 0;
//	}
//	//打开文件
//	//读文件
//	//关闭文件
//	fclose(pf);
//	pf = NULL;
//
//	return 0;
//}

int main()
{
	FILE* pf = fopen("test.txt", "w");
	if (pf != NULL)
	{
		fputc('h', pf);
		fputc('e', pf);
		fputc('l', pf);
		fputc('l', pf);
		fputc('o', pf);
	}
	fclose(pf);
	pf = NULL;
	return 0;
}

//键盘&屏幕均为外部设备
//键盘  标准输入设备 stdin
//屏幕  标准输出设备 stdout
//是一个程序默认打开的两个流设备

//int main()
//{
//	int ch = fgetc(stdin);//从标准输入流 读取
//	fputc(ch, stdout);//从标准输出流 输出
//	return 0;
//}

struct S
{
	int num;
	float score;
	char arr[10];
};
int main()
{
	//char arr[10] = { 0 };
	//int i = 0;
	////FILE* pf = fopen("test.txt", "r");
	////FILE* pf = fopen("test.txt", "w");
	//FILE* pf = fopen("txt.txt", "r");
	////FILE* pf = fopen("test.txt", "a");
	//if (pf == NULL)
	//	return 0;
	//读
	//printf("请输入一行要读取的字符数:>");
	//scanf("%d", &i);
	//fgets(arr, i, pf);//首先有结束字符‘\0’,(只会显示i-1个字符)
	//printf("%s\n", arr);//如果前一次输出时，那一行的后方还有剩余，则下一次输出时将那些剩余的看作首行
	//puts(arr);
	//fgets(arr, 1024, pf);//在屏幕上输出一行
	//printf("%s\n", arr);
	//puts(arr);

	//覆盖写
	//fputs("Hello ", pf);
	//fputs("World", pf);

	//追加写
	//fputs("\nNO WARNINGS!\n", pf);

	////对于结构体的格式化写
	//struct S s = { 100,3.14f,"BIT" };
	//fprintf(pf, "%d %lf %s", s.num, s.score, s.arr);

	////格式化读取
	//struct S s = { 0 };//接收从文件读取的内容
	//fscanf(pf, "%d %f %s", &(s.num), &(s.score), s.arr);
	//printf("%d %f %s", s.num, s.score, s.arr);

	//标准输入输出流
	struct S s = { 0 };
	fscanf(stdin, "%d %f %s", &(s.num), &(s.score), s.arr);//从stdin接收，以""内的形式分别存放在目标内		(经尝试，空格可作为分割符)
	fprintf(stdout, "%d %f %s", s.num, s.score, s.arr);
	/*fclose(pf);
	pf = NULL;*/
	return 0;
}

//sprintf  sscanf
struct S
{
	char name[10];
	int age;
	int tel;
};
int main()
{
	char arr[30] = { 0 };
	struct S s = { "abcdef",20,135467 };
	struct S s1 = { 0 };

	//将后方数据分别按照中间的格式（将格式化的数据）,以字符串的形式存放在前者内
	sprintf(arr, "%s %d %d", s.name,s.age, s.tel);
	printf("%s", arr);

	//从字符串中读取格式化的数据并存放在后者内部
	sscanf(arr, "%s %d %d", s1.name, &(s1.age), &(s1.tel));
	printf("%s %d %d", s1.name, s1.age, s1.tel);
	return 0;
}

struct S
{
	char name[20];
	int age;
	float height;
};
int main()
{
	//struct S s = { "张三",20, 1.86f };//数据来源
	//FILE* pf = fopen("txt.txt", "wb");

	struct S tmp = { 0 };//存储数据
	FILE* pf = fopen("txt.txt", "rb");
	if (pf == NULL)
		return 0;
	////fwrite:以二进制形式写入文件
	////fwrite(数据来源地址，数据的大小，存储最大个数，存入的文件地址)
	//fwrite(&s, sizeof(struct S), 1, pf);

	//fread:以二进制形式从文件读取数据
	//fread(读取数据存放地址，数据大小，读取最大个数，所读文件地址)
	fread(&tmp, sizeof(struct S), 1, pf);

	printf("%s,%d,%.2lf\n", tmp.name, tmp.age, tmp.height);
	return 0;
}

////fseek(文件指针，偏移量(正向右，负向左)(是从当前位置移动的字节数)，当前位置)依据文件指针当前位置与偏移量来定位指针
////SEEK_CUR  当前指针位置
////SEEK_SET  文件起始位置  指向偏移量为1字节的元素
////SEEK_END  文件末尾位置  经尝试，发现指向末尾处的'\0'
//int main()
//{
//	FILE* pf = fopen("test.txt", "r");
//	assert(pf);
//	fseek(pf, -5, SEEK_END);
//	int ch = fgetc(pf);
//	printf("%c\n", ch);
//
//	int pos = ftell(pf);
//	printf("%d\n", pos);
//
//	rewind(pf);//将文件指针所维护的位置指针恢复到文件的起始位置(经尝试，与SEEK_SET位置一样)
//	ch = fgetc(pf);
//	printf("%c\n", ch);
//
//	fclose(pf);
//	pf = NULL;
//	return 0;
//}

//feof()用于文件结束的判别
//根据getc接收到-1 或 用gets接收到NULL，判断文本文件是否读取结束
//根据实际返回值是否小于fread应该读取数目，判断二进制文件是否读取结束
int main()
{
	int ch = 0;
	//FILE* pf = fopen("test2.txt", "r");
	FILE* pf = fopen("test.txt", "r");
	if (!pf)//只读文件指针创建的判断
	{
		perror("test2.txt文件打开失败");//perror输出括号内的字符串，冒号：、空格 ，然后是最近的错误码对应的错误信息
		return 0;
	}

	//getc当读取失败或读取结束，都会返回EOF
	while ((ch = getc(pf)) != EOF)
	{
		putchar(ch);//正常使用时：每读取一个字符便输出一个字符
	}
	//读取结束
	//判断结束原因
	if (ferror(pf))//ferror 当文件读取失败时返回一个非0值，读取成功则为0
	{
		puts("读取失败\0");
	}
	else if (feof(pf))//feof()当遇到EOF时返回一个非0值
	{
		puts("读取结束\0");
	}

	fclose(pf);
	pf = NULL;
	return 0;
}
