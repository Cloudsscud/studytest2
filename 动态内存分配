#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<errno.h>
int main()
{
	//变长数组
	//int n = 0;
	//scanf("%d", &n);
	//int arr[n];//C99标准支持，但大部分编译器不支持
	
	//malloc使用
	//malloc(申请的空间大小)，返回所开辟空间的首地址,类型为void*
	//但当内存不足时会开辟失败，返回一个空指针NULL
	
	//比如开辟一个十字节的空间
	int* p = (int*)malloc(10 * sizeof(int));
	if (p == NULL)
		//输出错误原因
		printf("%s\n", strerror(errno));
	else
	{
		//使用所开辟的空间
		int i = 0;
		for (i = 0; i < 10; i++)
		{
			*(p + i) = i;
		}
		for (i = 0; i < 10; i++)
		{
			printf("%d ", *(p + i));
		}
	}
	//动态申请的空间使用完后，应该归还给操作空间
	free(p);//free释放的时动态开辟的空间
	//注意,虽然归还了p对应的空间，但是那部分空间的信息还被保存在内存中，也就是可以通过p再次对那部分信息进行操作，不安全
	p = NULL;
	//需要自行销毁指针p

	return 0;
}

//calloc
//int main()
//{
//	//calloc(元素的个数num，元素的大小size)
//	//申请num个大小为size的空间，并初始化为0，返回该空间的地址
//	int* p = calloc(10, sizeof(int));
//	//开辟空间后便应该判断是否开辟成功
//	if (p == NULL)
//		printf("%s\n", strerror(errno));
//	else
//	{
//		int i = 0;
//		for (i = 0; i < 10; i++)
//		{
//			printf("%d ", *(p + i));
//		}
//	}
//	free(p);
//	p = NULL;
//	return 0;
//}

//realloc
//realloc(要增加或缩减空间的地址，最终空间大小),返回值是新空间地址
//注意:在调整空间大小时，	如果旧空间后的空闲空间大小不足，则会开辟一个完整的新空间，将旧空间的值传到新空间对应位置，并将旧空间释放
//											防止非法访问
//						若旧空间后的空闲空间大小充足，则直接在后方调整
//另外，假如开辟新空间失败，则会返回NULL，所以不能用旧空间的指针直接接收新空间,防止旧空间直接消失
int main()
{
	int i = 0;
	//先申请个20字节，5个整形
	int* p = (int*)malloc(20);
	if (p == NULL)
		printf("%s\n", strerror(errno));
	else
	{
		for (i = 0; i < 5; i++)
		{
			*(p + i) = i;
		}
	}
	/*for (i = 0; i < 5; i++)
	{
		printf("%d ", *(p + i));
	}*/
	//我现在觉得5个整形不够，需要增加其长度,假设共需要10个整形(40字节)
	//用realloc调整所开辟的内存空间
	int* p2 = realloc(p, 40);
	//p = realloc(p, 40);//可以使用，但风险很大(比如非法访问、p成为NULL)
	if(p2!=NULL)
	{
		p = p2;
		p2 = NULL;
		for (i = 5; i < 10; i++)
			*(p + i) = i;
		for (i = 0; i < 10; i++)
		{
			printf("%d ", *(p + i));
		}
	}
	free(p);
	p = NULL;
	return 0;
}

//错误分析
// 1、
//void GetMem(char* p)
//{
//	p = (char*)malloc(40);	//函数内部申请空间，只能在函数内部使用
//							//并且在函数返回时未释放，且无法找回这部分空间，造成内存泄漏
//}
// 
//void Test()
//{
//	char* str = NULL;
//	GetMem(str);//此为传值操作(str与p均为一级指针)，返回后str无指向内容
//	strcpy(str, "Hello World");//程序崩溃
//	printf(str);
//	return 0;
//}

//改(1)
//void GetMem(char** p)
//{
//	*p = (char*)malloc(40);
//}
//void Test()
//{
//	char* str = NULL;
//	GetMem(&str);//进行传址操作
//	strcpy(str, "Hello World");
//	printf(str);
//	//释放开辟的空间
//	free(str);
//	str = NULL;
//}

//改(2)
//char* GetMem(char* p)//让改变的内容可以返回
//{
//	return (char*)malloc(40);
//}
//void Test()
//{
//	char* str = NULL;
//	str = GetMem(str);
//	strcpy(str, "Hello World");
//	printf(str);
//	//释放开辟的空间
//	free(str);
//	str = NULL;
//}
//int main()
//{
//	Test();
//	return 0;
//}

//2、
//返回栈空间地址问题
// 栈区上申请的空间会自动归还给操作系统
// 堆区不会自行归还，需使用free归还
//char* GetMem(void)
//{
//	//char a[] = "Hello World";//在栈区上申请一个空间,返回该空间的地址，但返回时该空间需要被归还给系统，则非法访问
//	static char a[] = "Hello World";//用static延长其生命周期即可 静态区
//	return a;
//}
//void Test()
//{
//	char* str = NULL;
//	str = GetMem();
//	printf(str);
//}
//int main()
//{
//	Test();
//	return 0;
//}

//使用柔性数组
//struct S
//{
//	char a;
//	int arr[];
//};

//struct S
//{
//	int num;
//	int arr[0];//此为一个柔性数组，在计算该结构体大小时，不考虑柔性数组大小（柔性数组可改变大小）
//};
//int main()
//{
//	//struct S s;
//	//printf("%d ", sizeof(s));//4
//	//如果我想要数组含五个元素
//	struct S* ps = (struct S*)malloc(sizeof(struct S)+5*sizeof(int));
//	ps->num = 100;
//	int i = 0;
//	for (i = 0; i < 5; i++)
//	{
//		ps->arr[i] = i;
//	}
//	for (i = 0; i < 5; i++)
//		printf("%d ", ps->arr[i]);
//	printf("\n");
//	//现在我想要10个元素
//	struct S* ptr = (struct S*)realloc(ps, sizeof(struct S) + 10 * sizeof(int));
//	if (ptr != NULL)
//	{
//		ps = ptr;
//	}
//	for (i = 5; i < 10; i++)
//	{
//		ps->arr[i] = i;
//	}
//	for (i = 0; i < 10; i++)
//		printf("%d ", ps->arr[i]);
//	free(ps);
//	return 0;
//}

////使用指针
//struct S
//{
//	int num;
//	int* arr;
//};
//int main()
//{
//	struct S* ps = (struct S*)malloc(sizeof(struct S));
//	ps->arr = (int*)malloc(5 * sizeof(int));
//	int i = 0;
//	for (i = 0; i < 5; i++)
//	{
//		*(ps->arr+i) = i;
//		printf("%d ", *(ps->arr + i));
//	}
//	printf("\n");
//	//扩大指针指向空间
//	int* ptr = realloc(ps->arr, 10 * sizeof(int));
//	if (ptr != NULL)
//		ps->arr = ptr;
//	for (i = 5; i < 10; i++)
//	{
//		*(ps->arr+i) = i;
//	}
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", *(ps->arr + i));
//	}
//	free(ps->arr);
//	ps->arr = NULL;
//	free(ps);
//	ps = NULL;
//	return 0;
//}

//比较：
//1.指针方式使用多个malloc，就要对应多个free，易出现错误
//2.malloc越多，产生的内存碎片越多，效率越低
//3.用柔性数组，开辟的空间是连续的，内存访问效率高（局部性原理：cpu在访问存储器时，会有更大概率先访问连续的内存区域）
