#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>
#include<assert.h>
#include<string.h>

void reserve(char* str)
{
	assert(str);
	int len = strlen(str);
	char* left = str;
	char* right = str + len - 1;

	while (left<right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}

int main()
{
	char arr[256] = { 0 };
	//scanf("%s", arr);
	gets(arr);//读取一行
	//逆序函数
	reserve(arr);
	//打印
	printf("%s\n", arr);
	return 0;
}
//int main()
//{
//	int n = 0;
//	int a = 0;
//	scanf("%d%d", &a, &n);//2,5
//	int sum = 0;
//	int ret = 0;
//	int i = 0;
//	for (i = 0; i < n; i++)
//	{
//		//依次令ret为2，22，222,2222,22222
//		ret = ret * 10 + a;
//		sum += ret;
//	}
//	printf("%d\n", sum);
//	return 0;
//}

//#include<math.h>
//
//int main()
//{
//	int i = 0;
//	for (i = 0; i < 100000 ; i++)
//	{
//		//找出自幂数
//		//(1)看有几位数
//		int n = 1;
//		int tmp = i;
//		while (tmp/=10)
//		{
//			n++;
//		}
//
//		//(2)求每一位的n次方之和
//		tmp = i;
//		int sum = 0;
//		while(tmp)
//		{
//			sum += pow(tmp % 10, n);
//			tmp /= 10;
//		}
//
//		//(3)判断是否相等
//		if (i == sum)
//		{
//			printf("%d ", i);
//		}
//	}
//	return 0;
//}

//      * 6 1
//     *** 5 3
//    ***** 4 5
//   ******* 3 7
//  ********* 2 9 
// ***********1 11
//************* 0 13
// ***********
//  *********
//   *******
//    *****
//     ***
//      *
//int main()
//{
//	//打印的上半行行数
//	int line = 0;
//	scanf("%d", &line);
//	//(1)打印上半
//	int i = 0;
//	for (i = 0; i < line; i++)//每一行
//	{
//		//打印空格
//		int j = 0;
//		for (j = 0; j < line - 1 - i;j++)
//		{
//			printf(" ");
//		}
//		// 打印*
//		for (j = 0; j < (2 * i + 1); j++)
//		{
//			printf("*");
//		}
//		printf("\n");
//	}
//	//(2)打印下半
//	for (i = 0; i < line - 1; i++)
//	{
//		int j = 0;
//		//空格
//		for (j = 0; j <= i; j++)
//		{
//			printf(" ");
//		}
//		//*
//		for (j = 0; j < 2 * (line - i-1)-1; j++)
//		{
//			printf("*");
//		}
//		printf("\n");
//	}
//	return 0;
//}

//给了一些钱，1元可换一瓶水，两个空瓶换一瓶水，问最终能喝多少水
//int main()
//{
	//(1)
	//int money = 0;
	//scanf("%d", &money);
	////已喝水的瓶数
	//int total = money;
	////现在的空瓶数
	//int empty = money;
	//while (empty >= 2)
	//{
	//	//换水之后又喝的水
	//	total += empty / 2;
	//	//换的水喝完后剩的空瓶数
	//	empty = empty / 2 + empty % 2;
	//}

	//(2)
	//从转换价值的角度
	// 因为一元能买一瓶水，而两瓶水却可以换一瓶水
	//则一瓶水相当于只花0.5元，但是，换到最后，手中一定会留有一个空瓶,所以可以从(2*金额-1)计算瓶数
//	total = 2 * money - 1;
//	printf("能喝%d瓶水\n", total);
//	return 0;
//}

//#include<string.h>
//int main()
//{
//	char a[1000] = { 0 };
//	int i = 0;
//	for (i = 0; i < 1000; i++)
//	{
//		a[i] = -1 - i;
//	}
//	printf("%d\n", strlen(a));//255
//	return 0;
//}

////杨辉三角
//#define x 11//行数
//int main()
//{
//	int arr[x][x] = {0};
//	int i = 0;
//	for (i = 0; i < x; i++)
//	{
//		int j = 0;
//		for (j = 0; j < x; j++)
//		{
//			if (j == 0)
//				arr[i][j] = 1;
//			if(i==j)
//				arr[i][j] = 1;
//			if (i >= 2 && j >= 1)
//				arr[i][j] = arr[i - 1][j - 1] + arr[i - 1][j];
//		}
//	}
//
//	//打印数字
//	for (i = 0; i < x; i++)
//	{
//		int j = 0;
//		for (j = 0; j <= i; j++)
//		{
//			printf("%3d ", arr[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}

//找出凶手(其中有三句真话，一句假话)
// a:不是我
// b:是c
// c：是d
// d：c在胡说
//
int main()
{
	int killer = 0;
	for (killer = 'a'; killer <= 'd'; killer++)
	{
		if ((killer != 'a') + (killer == 'c') + (killer == 'd') + (killer != 'd') == 3)//三句真话一句假话
		{
			printf("killer 为 %c\n", killer);
		}
	}
	return 0;
}
////一半真话，一半假话
//int main()
//{
//	int a, b, c, d, e;
//	for (a = 1; a <= 5; a++)
//	{
//		for (b = 1; b <= 5; b++)
//		{
//			for (c = 1; c <= 5; c++)
//			{
//				for (d = 1; d <= 5; d++)
//				{
//					for (e = 1; e <= 5; e++)
//					{
//						if (((b == 2) + (a == 3) == 1)
//							&& ((b == 2) + (e == 4) == 1)
//							&& ((c == 1) + (d == 2) == 1)
//							&& ((c == 5) + (d == 3) == 1)
//							&& ((e == 4) + (a == 1) == 1))
//							if ((a * b * c * d * e) == 120)//确保五个名次都不一样
//								printf("a=%d,b=%d,c=%d,d=%d,e=%d\n", a, b, c, d, e);
//					}
//				}
//			}
//		}
//	}
//	return 0;
//}

//#include<stdlib.h>
//int main()
//{
//	//申请空间
//	int* p = (int*)malloc(10 * sizeof(int));
//	//使用空间
//	// ....
//	//释放空间
//	free(p);
//	//free不会改变释放对象的内容
//	p = NULL;
//	return 0;
//}
//#include<stdio.h>
//#include<string.h>
//
//int main()
//{
//	char arr1[30] = "abc";
//	//char arr2[] = "edf";
//	char arr2[30] = "abcdef";
//	//strcat(arr1, arr1);
//	//printf("%s\n", arr1);
//	int len = strlen(arr1);
//	//strncat(arr1, arr1,len);
//	int len2 = strlen(arr2);
//	//strncat(arr1, arr2, len2);
//	strncat(arr1, arr2, len2);
//	//strncat(arr2, arr1, len);
//	printf("%s\n", arr1);
//	//printf("%s\n", arr2);
//	return 0;
//}
// 
//#include<stdio.h>
//#include<string.h>
//
//int is_left_move(char* arr1,char* arr2)
//{
//	int len1 = strlen(arr1);
//	int len2 = strlen(arr2);
//	if (len1 != len2)
//		return 0;
//	//给arr1追加一个arr1
//	strncat(arr1, arr1, len1);
//	//看arr2是否是两串arr1的子串
//	char* ret = strstr(arr1, arr2);
//	if (ret != NULL)
//		return 1;
//	else
//		return 0;
//}
//int main()
//{
//	char arr1[30] = "abcdef";
//	char arr2[] = "defabc";
//	int ret = is_left_move(arr1,arr2);
//	if (ret == 1)
//		printf("Yes\n");
//	else
//		printf("No\n");
//	return 0;
//}

//杨氏矩阵
//一个数字矩阵，从左到右是递增的，从上到下是递增的
//写一个程序看某个数字是否存在其中
//要求:时间复杂性小于O(N)
#include<stdio.h>
Findnum(int arr[3][3], int k, int* px,int* py)
{
	int x = 0;//寻找到的行
	int y = *px - 1;
	int count = 0;
	while (x <= *py - 1 && y >= 0)
	{
		count++;
		if (arr[x][y] < k)
			x++;
		else if (arr[x][y] > k)
			y--;
		else
		{
			*px = x;
			*py = y;
			return 1;
		}
	}
	return 0;
}

int main()
{
	int arr[3][3] = { {1,2,4},{5,6,9},{7,8,10} };
	int num = 0;
	int x = 3;
	int y = 3;
	//返回型参数
	printf("请输入您要查找的数字:");
	scanf("%d", &num);
	if (Findnum(arr,num,&x,&y) == 1)
	{
		printf("有该数字\n");
		printf("下标为(%d,%d)\n",x,y);
	}
	else
		printf("无该数字\n");
	return 0;
}
