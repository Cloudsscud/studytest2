2024/04/01

int main()
{
	/*char ch = 'w';
	char* pc = &ch;
	printf("%c\n", *pc);*/

	/*char arr[] = "abcdef";
	char* pc = arr;
	printf("%s\n", arr);
	printf("%s\n", pc);*/

	//char* p = "abcdef";//指针变量p存的是'a'	"abcdef"为一个常量字符串,不能被修改
	////*p = 'W';
	//printf("%c\n", *p);
	//printf("%c\n", *p+1);
	//printf("%c\n", *p+3);
	//printf("%s\n", p);

	char arr1[] = "abcdef";
	char arr2[] = "abcdef";
	char* p1 = "abcdef";
	char* p2 = "abcdef";
	if (arr1 == arr2)
		printf("same\n");
	else
		printf("not same\n");//not

	if (p1 == p2)
		printf("same\n");//yes
	else
		printf("not same\n");
	//结果说明：即使两个数组内部元素完全相同，这两个数组也不相同；
	//如果两个指针变量指向同一个常量字符串，那么这两个指针变量相同

	return 0;
}
int main()
{
	////数组指针尝试
	//int arr1[] = { 1,2,3 };
	//int arr2[] = { 4,5,6 };
	//int arr3[] = { 7,8,9 };
	//int* parr[] = { arr1,arr2,arr3 };//一个数组指针

	/*int i = 0;
	for (i = 0; i < 3; i++)
	{
		int j = 0;
		for (j = 0; j < 3; j++)
		{
			printf("%d ", *parr[i]+j);
		}
		printf("\n");
	}*/

	////尝试用指针数组 套 数组指针
	//int xuehao[] = { 7,5,3 };
	//int chengji[] = { 123,112,89 };
	//int nianling[] = { 13,12,13 };
	//int* xuesheng_gradelist[] = { xuehao,chengji,nianling };
	// 
	//int* changshi[] = { parr,xuesheng_gradelist };//看似是可行的

	////尝试输出 每个数组指针 内部数组的 元素
	//int i = 0;
	//for (i = 0; i < 2; i++)//有两个数组指针
	//{
	//	int j = 0;
	//	for (j = 0; j < 3; j++)//每个数组指针有三个数组
	//	{
	//		int z = 0;
	//		for (z = 0; z < 1; z++)//每个数组有三个元素
	//		{
	//			printf("%d ", *(*changshi[i]+j)+z);	//失败：不知道如何表示一个数组内部的某个元素
	//												//*changshi[i]+j正常应该使其表示一个指针数组
	//		}
	//		printf("\n");
	//	}

//参数为一个数组
void print1(int arr[3][5], int x, int y)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < x; i++)
	{
		for (j = 0; j < y; j++)
		{
			printf("%d ", arr[i][j]);
		}
		printf("\n");
	}
}

//参数为一个指针
void print2(int (*p)[5], int x, int y)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < x; i++)
	{
		for (j = 0; j < y; j++)
		{
			//printf("%d ", *(*(p + i) + j));	//(p + i)表示第i+1行的数组地址	*(p + i)表示i+1行数组首元素地址
												//*(p + i) +j表示（i+1行数组的）第j+1个元素地址
												//*(*(p + i) + j)表示i+1行第j+1个元素

			printf("%d ", (*(p + i))[j]);  //*(p + i)是个数组，第i+1行数组 （*(p + i)[j] 表示i+1行数组内部的第j+1个元素
		}
		printf("\n");
	}
}
int main()
{
	int arr[3][5] = { {5,1,4,2,6}, {4,2,8,9,6}, {5,4,8,7,9} };
	print1(arr, 3, 5);
	printf("\n");
	print2(arr, 3, 5);
	return 0;
}
	//}

	return 0;
}

//void test(int arr1[])
//{}
//void test1(int arr1)
//{}
//void test2(int *arr1)
//{}

//void test_1(int* arr2[])
//{}
//void test_2(int* *arr2)//*arr2是该指针数组首元素（首指针）,该首指针的类型为int*
//{}
//
//int main() 
//{
//	int arr1[10] = { 0 };
//	int* arr2[20] = { 0 };//存放指针的数组，存放的指针类型为int*
//	/*test(arr1);
//	test1(arr1);
//	test2(arr1);*/
// 
//	test_1(arr2);
//	test_2(arr2);//arr2是该指针数组 首元素（首指针）的地址
//}

//void test(int arr[][4])//二维数组传参数时可以省略行，但不能省略列
//{}
//void test1(int (*arr)[4])//（*arr）为二维数组的第一行数组，[4]说明该第一行数组有四个int类型的元素,即四列元素
//{}
//
//int main()
//{
//	int arr[3][4] = { {1,2,3,4},{5,6,7,8},{9,10,11,12} };
//	test(arr);//二维数组名arr即为第一行数组{1,2,3,4}的地址
//	test1(arr);
//}

//void test(int **p)
//{}
//int main()
//{
//	int* ptr = NULL;
//	test(&ptr);
//	int** pp = &ptr;
//	test(pp);
//	int* arr[] = { 0 };//指针数组名 传参用二级指针
//	test(arr);
//	return 0;
//}

////函数指针
//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//
//void print(char* str)
//{
//	printf("%s\n", str);
//}
//
//int main()
//{
//	//printf("%p\n", &Add);//函数名与函数名的地址 一样
//	//printf("%p\n", Add);
//	int (*p)(int, int) = Add;
//	printf("%d\n", (*p)(2, 5));
//	printf("%d\n", p(2, 5));//Add函数传给了p，那么在使用该函数时，无论是否解引用都不影响使用
//	printf("%d\n", Add(2, 5));
//
//	void (*ptr)(char*) = print;
//	(*ptr)("Hello world");
//
//	return 0;
//}

//  ( *  (void (*)()) 0)  ()
//	void (*)() 无参数无返回值的函数指针类型
//	(void (*)()) 0 将0强制类型转化为该函数的指针，即该函数的地址
//	*(void (*)()) 0 就是该函数
//	后加()就是调用该函数

//	void(*signal(int, void(*)(int)))(int);
// signal函数声明，两个参数为（整形，函数指针类型）该处函数指针指向的函数的参数为int，返回类型为void
// 其返回值为 除去signal函数后剩余的 void(*)(int)，即函数指针类型，该处函数指针指向的函数的参数为int，返回类型为void
// 简化后==
//	typedef void(*pfun_t)(int);
//	pfun_t signal(int, pfun_t);
//将void(*)(int)类型定义为pfun_t

////函数指针数组
//int Add(int x, int y)
//{
//	return x + y;
//}
//int Sub(int x, int y)
//{
//	return x - y;
//}
//int Mul(int x, int y)
//{
//	return x * y;
//}
//int Div(int x, int y)
//{
//	return x / y;
//}
//
//int main()
//{
//	int (*pa)(int, int) = Add;//Sub,Mul,Div//麻烦
//	//我们需要一个数组来存放四则运算函数
//	int (*parr[])(int, int) = {Add,Sub,Mul,Div};
//	//使用
//	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//		printf("%d\n", parr[i](4, 5));
//	}
//	return 0;
//}

//char* my_strcpy(char* dest, const char* src);
////1)用一个函数指针pf 指向my_strcpy
////2)写一个函数指针数组pfArr 能够存放4个my_strcpy的地址
//int main()
//{
//	//1)
//	char* (*pf)(char*, const char*) = my_strcpy;
//	//2)
//	char* (*pfArr[4])(char*, const char*) = {my_strcpy};
//	return 0;
//}
