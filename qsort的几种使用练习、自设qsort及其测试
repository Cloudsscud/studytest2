//2024/04/08

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int cmp_int(const void* e1,const void* e2)//比较两个整形
{
	return *(int*)e1 - *(int*)e2;
}
void test1()//增序排序整形数组并输出
{
	int arr[] = {5,8,7,2,1,4,6,3,9,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), cmp_int);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
}


int cmp_float(const void* e1, const void* e2)//比较两个浮点型
{
	if (*(float*)e1 == *(float*)e2)
		return 0;
	else
		return (*(float*)e1 < *(float*)e2 ? -1 : 1);
}
void test2()//增序排列浮点型数组并输出
{
	float arr[] = { 9.1,8.5,7.1,9.0,5.5,3.3,5.5,-1.1 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), cmp_float);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%lf ", arr[i]);
	}
}

struct Stu
{
	char name[20];
	int age;
};
int cmp_struct_age(const void* e1, const void* e2)//按年龄增序比较
{
	return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;
}

int cmp_struct_name(const void* e1, const void* e2)
{
	return strcmp(((struct Stu*)e1)->name, ((struct Stu*)e2)->name);
	//strcmp自前往后比较两字符串ASIC 2值，前者小于后者则返回<0的数字
}
void test3()//按结构体变量的年龄比较
{
	struct Stu s[4] = { {"zhangsan",18},{"lisi",20},{"wangwu",15},{"annadao",55} };
	int sz = sizeof(s) / sizeof(s[0]);
	//qsort(s, sz, sizeof(s[0]), cmp_struct_age);//按年龄

	qsort(s, sz, sizeof(s[0]), cmp_struct_name);//按名字

	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%s ", s[i].name);
		printf("%d ", s[i].age);
		printf("\n");
	}
}


//自制一个qsort功能的冒泡排序(增序)
void Swap(char* e1, char* e2,int width)//按照字节对应交换，使用width确保不会数据丢失
{
	int i = 0;
	for (i = 0; i < width; i++)
	{
		char ret = *e1;
		*e1 = *e2;
		*e2 = ret;
		e1++;
		e2++;
	}
}
void bubble_sort(void* base, int sz, int width, int (*cmp)(void* e1,void* e2))
{
	int i = 0;
	//趟数
	for (i = 0; i < sz - 1; i++)
	{
		int j = 0;
		//每一趟比较的对数
		for (j = 0; j < sz - 1 - i; j++)
		{
			//比较并排序
			//比较函数cmp是用户自己的比较方法
			if (cmp((char*)base + j * width, (char*)base + (j + 1) * width)>0)//前一个大于后一个时，两者交换
				//因为我方不知道用户的比较方式，所以需要用户传进来width，用来知道步长，从而对排序数组的各个元素进行操作
			{
				Swap((char*)base + j * width, (char*)base + (j + 1)*width,width);
				//交换时不知道一个元素的字节数，所以要用户传入的的字节数width，来确保交换时不会发生数据丢失
			}
		}
	}
}

//测试bubble_sort
void test4()
{
	float arr[] = { 9.1,8.5,7.1,9.0,5.5,3.3,5.5,-1.1 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz, sizeof(arr[0]), cmp_float);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%lf ", arr[i]);
	}
}

void test5()
{
	struct Stu s[4] = { {"zhangsan",18},{"lisi",20},{"wangwu",15},{"annadao",55} };
	int sz = sizeof(s) / sizeof(s[0]);
	//bubble_sort(s, sz, sizeof(s[0]), cmp_struct_name);
	bubble_sort(s, sz, sizeof(s[0]), cmp_struct_age);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%s ", s[i].name);
		printf("%d ", s[i].age);
		printf("\n");
	}
}
int main()
{
	//test1();
	//test2();
	//test3();
	//test4();
	//test5();
	return 0;
}
