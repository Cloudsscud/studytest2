//2024/04/20
//用二分法求方程4x^3 - 5x^2 + 6x - 7 = 0在（-10,10）的根；并求出与该根最相邻的素数是哪一个。

//此处编写了一个可以求一元方程的近似根，并输出其最近素数的小代码
//注意：需事先将方程写成函数，要求形参未知量(如x)为float类型,返回值为函数值,类型也为float

#include<stdio.h>
#include<math.h>

//所解方程，x为方程的解,返回函数值,类型均为浮点型
float function(float x)
{
	return (4 * pow(x, 3) - 5 * pow(x, 2) + 6 * x - 7);
}

//二分法求方程根的近似值(利用函数指针)
// 使用格式为root(方程的函数名，左区间，右区间),返回值为根的近似值(float类型)
float root(float(*function)(float),float left,float right)
{
	float middle = (left + right) / 2;

	//二分法找根的近似值
	while (fabs(function(middle)) >= 1e-6)//根精度为10^-6
	{
		if (function(left) * function(middle) > 0)
		{
			left = middle;
			middle = (left + right) / 2;
		}
		else if (function(left) * function(middle) < 0)
		{
			right = middle;
			middle = (left + right) / 2;
		}
	}
	return middle;//返回值即为根近似值
}

//判断是否为素数
int whether_prime(int a)
{
	int i = 0;
		for (i = 2; i < a; i++)
		{
			if (a % i == 0)
			{
				break;
			}
		}
		if (a == i)
			return a;//是素数就返回素数值
		else
			return 0;//非素数返回0
}

//找出并输出最相邻的素数
void find_nearest_prime(float x)
{
	if (x < 2)
		printf("最近素数为2\n");//若该数小于最小素数2，则最近素数为2
	else if (x == 2)
		printf("最近素数为3\n");//若刚好为最小素数2，则最近素数为3
	else//该数比2大的情况
	{
		int y = x;
		float d1, d2;
		//找小于并最接近的素数
		while (1)
		{
			x--;
			if (whether_prime((int)x) != 0)
			{
				d1 = x - (int)x;//与左侧最近素数(int)x的距离
				break;
			}
		}

		//找大于并最接近的素数
		while (1)
		{
			y++;
			if (whether_prime((int)y) != 0)
			{
				d2 = (int)y - y;//与右侧最近素数(int)y的距离
				break;
			}
		}

		//判断哪边距离更近,并输出最近素数
		if (d1 > d2)
			printf("最近素数为%d\n", (int)y);
		else if (d1 < d2)
			printf("最近素数为%d\n", (int)x);
		else
			printf("最近素数为%d与%d\n", (int)x,(int)y);
	}
}

int main()
{
	//求根近似值
	float x = root(function, -10.0, 10.0);
	printf("根近似为%lf\n", x);

	//找出并输出根的最相邻素数
	find_nearest_prime(x);

	return 0;
}
